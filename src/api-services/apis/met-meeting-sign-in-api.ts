/* tslint:disable */
/* eslint-disable */
/**
 * 恒瑞代谢公众号
 * 恒瑞代谢相关公众号接口
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { AdminResultBoolean } from '../models';
import { AdminResultListMetMeetingSignInRecord } from '../models';
/**
 * MetMeetingSignInApi - axios parameter creator
 * @export
 */
export const MetMeetingSignInApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 判断是否完成签到
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMetMeetingSignInCheckSignInIdGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiMetMeetingSignInCheckSignInIdGet.');
            }
            const localVarPath = `/api/metMeetingSignIn/checkSignIn/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 会议签到
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMetMeetingSignInMeetSignInIdPost: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiMetMeetingSignInMeetSignInIdPost.');
            }
            const localVarPath = `/api/metMeetingSignIn/meetSignIn/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据会议ID获取签到清单(包含员工和医生)
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMetMeetingSignInSignInListIdGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiMetMeetingSignInSignInListIdGet.');
            }
            const localVarPath = `/api/metMeetingSignIn/signInList/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MetMeetingSignInApi - functional programming interface
 * @export
 */
export const MetMeetingSignInApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 判断是否完成签到
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMetMeetingSignInCheckSignInIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultBoolean>>> {
            const localVarAxiosArgs = await MetMeetingSignInApiAxiosParamCreator(configuration).apiMetMeetingSignInCheckSignInIdGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 会议签到
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMetMeetingSignInMeetSignInIdPost(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await MetMeetingSignInApiAxiosParamCreator(configuration).apiMetMeetingSignInMeetSignInIdPost(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 根据会议ID获取签到清单(包含员工和医生)
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMetMeetingSignInSignInListIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultListMetMeetingSignInRecord>>> {
            const localVarAxiosArgs = await MetMeetingSignInApiAxiosParamCreator(configuration).apiMetMeetingSignInSignInListIdGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * MetMeetingSignInApi - factory interface
 * @export
 */
export const MetMeetingSignInApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 判断是否完成签到
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMetMeetingSignInCheckSignInIdGet(id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultBoolean>> {
            return MetMeetingSignInApiFp(configuration).apiMetMeetingSignInCheckSignInIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 会议签到
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMetMeetingSignInMeetSignInIdPost(id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return MetMeetingSignInApiFp(configuration).apiMetMeetingSignInMeetSignInIdPost(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 根据会议ID获取签到清单(包含员工和医生)
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMetMeetingSignInSignInListIdGet(id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultListMetMeetingSignInRecord>> {
            return MetMeetingSignInApiFp(configuration).apiMetMeetingSignInSignInListIdGet(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MetMeetingSignInApi - object-oriented interface
 * @export
 * @class MetMeetingSignInApi
 * @extends {BaseAPI}
 */
export class MetMeetingSignInApi extends BaseAPI {
    /**
     * 
     * @summary 判断是否完成签到
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetMeetingSignInApi
     */
    public async apiMetMeetingSignInCheckSignInIdGet(id: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultBoolean>> {
        return MetMeetingSignInApiFp(this.configuration).apiMetMeetingSignInCheckSignInIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 会议签到
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetMeetingSignInApi
     */
    public async apiMetMeetingSignInMeetSignInIdPost(id: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return MetMeetingSignInApiFp(this.configuration).apiMetMeetingSignInMeetSignInIdPost(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 根据会议ID获取签到清单(包含员工和医生)
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetMeetingSignInApi
     */
    public async apiMetMeetingSignInSignInListIdGet(id: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultListMetMeetingSignInRecord>> {
        return MetMeetingSignInApiFp(this.configuration).apiMetMeetingSignInSignInListIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }
}
