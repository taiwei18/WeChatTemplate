/* tslint:disable */
/* eslint-disable */
/**
 * 恒瑞代谢公众号
 * 恒瑞代谢相关公众号接口
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { AdminResultDescribeLiveStreamStateOutput } from '../models';
import { AdminResultInt64 } from '../models';
import { AdminResultListMetMeeting } from '../models';
import { AdminResultMetMeeting } from '../models';
import { MetAddMeetingInput } from '../models';
import { MetMeetingInput } from '../models';
import { MetUpdateMeetingInput } from '../models';
/**
 * MetMeetingApi - axios parameter creator
 * @export
 */
export const MetMeetingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 增加创建会议
         * @param {MetAddMeetingInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMetMeetingAddMeetingPost: async (body?: MetAddMeetingInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/metMeeting/addMeeting`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据ID获取会议信息
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMetMeetingGetIdGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiMetMeetingGetIdGet.');
            }
            const localVarPath = `/api/metMeeting/get/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取会议直播状态
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMetMeetingGetLiveStateIdGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiMetMeetingGetLiveStateIdGet.');
            }
            const localVarPath = `/api/metMeeting/getLiveState/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取我的会议清单
         * @param {MetMeetingInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMetMeetingGetMyMeetListPost: async (body?: MetMeetingInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/metMeeting/getMyMeetList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取会议清单
         * @param {MetMeetingInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMetMeetingGetPost: async (body?: MetMeetingInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/metMeeting/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 修改会议观看人数
         * @param {number} id 
         * @param {number} num 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMetMeetingSetVisitsIdNumPost: async (id: number, num: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiMetMeetingSetVisitsIdNumPost.');
            }
            // verify required parameter 'num' is not null or undefined
            if (num === null || num === undefined) {
                throw new RequiredError('num','Required parameter num was null or undefined when calling apiMetMeetingSetVisitsIdNumPost.');
            }
            const localVarPath = `/api/metMeeting/setVisits/{id}/{num}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"num"}}`, encodeURIComponent(String(num)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 更新会议
         * @param {MetUpdateMeetingInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMetMeetingUpdateMeetingPost: async (body?: MetUpdateMeetingInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/metMeeting/updateMeeting`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MetMeetingApi - functional programming interface
 * @export
 */
export const MetMeetingApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 增加创建会议
         * @param {MetAddMeetingInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMetMeetingAddMeetingPost(body?: MetAddMeetingInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultInt64>>> {
            const localVarAxiosArgs = await MetMeetingApiAxiosParamCreator(configuration).apiMetMeetingAddMeetingPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 根据ID获取会议信息
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMetMeetingGetIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultMetMeeting>>> {
            const localVarAxiosArgs = await MetMeetingApiAxiosParamCreator(configuration).apiMetMeetingGetIdGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取会议直播状态
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMetMeetingGetLiveStateIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultDescribeLiveStreamStateOutput>>> {
            const localVarAxiosArgs = await MetMeetingApiAxiosParamCreator(configuration).apiMetMeetingGetLiveStateIdGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取我的会议清单
         * @param {MetMeetingInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMetMeetingGetMyMeetListPost(body?: MetMeetingInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultListMetMeeting>>> {
            const localVarAxiosArgs = await MetMeetingApiAxiosParamCreator(configuration).apiMetMeetingGetMyMeetListPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取会议清单
         * @param {MetMeetingInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMetMeetingGetPost(body?: MetMeetingInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultListMetMeeting>>> {
            const localVarAxiosArgs = await MetMeetingApiAxiosParamCreator(configuration).apiMetMeetingGetPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 修改会议观看人数
         * @param {number} id 
         * @param {number} num 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMetMeetingSetVisitsIdNumPost(id: number, num: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await MetMeetingApiAxiosParamCreator(configuration).apiMetMeetingSetVisitsIdNumPost(id, num, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 更新会议
         * @param {MetUpdateMeetingInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMetMeetingUpdateMeetingPost(body?: MetUpdateMeetingInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await MetMeetingApiAxiosParamCreator(configuration).apiMetMeetingUpdateMeetingPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * MetMeetingApi - factory interface
 * @export
 */
export const MetMeetingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 增加创建会议
         * @param {MetAddMeetingInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMetMeetingAddMeetingPost(body?: MetAddMeetingInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultInt64>> {
            return MetMeetingApiFp(configuration).apiMetMeetingAddMeetingPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 根据ID获取会议信息
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMetMeetingGetIdGet(id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultMetMeeting>> {
            return MetMeetingApiFp(configuration).apiMetMeetingGetIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取会议直播状态
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMetMeetingGetLiveStateIdGet(id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultDescribeLiveStreamStateOutput>> {
            return MetMeetingApiFp(configuration).apiMetMeetingGetLiveStateIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取我的会议清单
         * @param {MetMeetingInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMetMeetingGetMyMeetListPost(body?: MetMeetingInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultListMetMeeting>> {
            return MetMeetingApiFp(configuration).apiMetMeetingGetMyMeetListPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取会议清单
         * @param {MetMeetingInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMetMeetingGetPost(body?: MetMeetingInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultListMetMeeting>> {
            return MetMeetingApiFp(configuration).apiMetMeetingGetPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 修改会议观看人数
         * @param {number} id 
         * @param {number} num 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMetMeetingSetVisitsIdNumPost(id: number, num: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return MetMeetingApiFp(configuration).apiMetMeetingSetVisitsIdNumPost(id, num, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 更新会议
         * @param {MetUpdateMeetingInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMetMeetingUpdateMeetingPost(body?: MetUpdateMeetingInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return MetMeetingApiFp(configuration).apiMetMeetingUpdateMeetingPost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MetMeetingApi - object-oriented interface
 * @export
 * @class MetMeetingApi
 * @extends {BaseAPI}
 */
export class MetMeetingApi extends BaseAPI {
    /**
     * 
     * @summary 增加创建会议
     * @param {MetAddMeetingInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetMeetingApi
     */
    public async apiMetMeetingAddMeetingPost(body?: MetAddMeetingInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultInt64>> {
        return MetMeetingApiFp(this.configuration).apiMetMeetingAddMeetingPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 根据ID获取会议信息
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetMeetingApi
     */
    public async apiMetMeetingGetIdGet(id: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultMetMeeting>> {
        return MetMeetingApiFp(this.configuration).apiMetMeetingGetIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 获取会议直播状态
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetMeetingApi
     */
    public async apiMetMeetingGetLiveStateIdGet(id: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultDescribeLiveStreamStateOutput>> {
        return MetMeetingApiFp(this.configuration).apiMetMeetingGetLiveStateIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 获取我的会议清单
     * @param {MetMeetingInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetMeetingApi
     */
    public async apiMetMeetingGetMyMeetListPost(body?: MetMeetingInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultListMetMeeting>> {
        return MetMeetingApiFp(this.configuration).apiMetMeetingGetMyMeetListPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 获取会议清单
     * @param {MetMeetingInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetMeetingApi
     */
    public async apiMetMeetingGetPost(body?: MetMeetingInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultListMetMeeting>> {
        return MetMeetingApiFp(this.configuration).apiMetMeetingGetPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 修改会议观看人数
     * @param {number} id 
     * @param {number} num 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetMeetingApi
     */
    public async apiMetMeetingSetVisitsIdNumPost(id: number, num: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return MetMeetingApiFp(this.configuration).apiMetMeetingSetVisitsIdNumPost(id, num, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 更新会议
     * @param {MetUpdateMeetingInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetMeetingApi
     */
    public async apiMetMeetingUpdateMeetingPost(body?: MetUpdateMeetingInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return MetMeetingApiFp(this.configuration).apiMetMeetingUpdateMeetingPost(body, options).then((request) => request(this.axios, this.basePath));
    }
}
